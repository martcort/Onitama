package Jeu;

import java.awt.GridLayout;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JButton;

/**
 *
 * @author marti
 */
public class fenetrePrincipale extends javax.swing.JFrame {
    
    Carte carte;
    Grille grille = new Grille();
    
    
    /**
     * Creates new form fenetrePrincipale
     */
    public fenetrePrincipale() {
        initComponents();
        // Initialisation des variables
        
        
        getContentPane().add(jPanelGrille, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 50,
        500, 500));
        this.pack();
        this.revalidate();
    
    
        
        
        jPanelGrille.setLayout(new GridLayout(5, 5));
        coteDroit.setLayout( new GridLayout(2,1));
        coteGauche.setLayout( new GridLayout(2,1));
        
        
        
        for (int j=0; j < 5; j++ ) {
            for (int i=0;i<5; i++){
                celluleGraphique bouton_cellule = new celluleGraphique(grille.grille[j][i], 25,25); // création d'un bouton
                jPanelGrille.add(bouton_cellule); // ajout au Jpanel PanneauGrille
            }
        }
        initialiserPartie();
        creerDeckTotal();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelGrille = new javax.swing.JPanel();
        coteDroit = new javax.swing.JPanel();
        coteGauche = new javax.swing.JPanel();
        defausse = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanelGrille.setBackground(new java.awt.Color(200, 63, 65));

        javax.swing.GroupLayout jPanelGrilleLayout = new javax.swing.GroupLayout(jPanelGrille);
        jPanelGrille.setLayout(jPanelGrilleLayout);
        jPanelGrilleLayout.setHorizontalGroup(
            jPanelGrilleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 172, Short.MAX_VALUE)
        );
        jPanelGrilleLayout.setVerticalGroup(
            jPanelGrilleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 149, Short.MAX_VALUE)
        );

        getContentPane().add(jPanelGrille, new org.netbeans.lib.awtextra.AbsoluteConstraints(111, 145, -1, -1));

        coteDroit.setBackground(new java.awt.Color(200, 63, 65));

        javax.swing.GroupLayout coteDroitLayout = new javax.swing.GroupLayout(coteDroit);
        coteDroit.setLayout(coteDroitLayout);
        coteDroitLayout.setHorizontalGroup(
            coteDroitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        coteDroitLayout.setVerticalGroup(
            coteDroitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        getContentPane().add(coteDroit, new org.netbeans.lib.awtextra.AbsoluteConstraints(289, 145, -1, 149));

        coteGauche.setBackground(new java.awt.Color(200, 63, 65));

        javax.swing.GroupLayout coteGaucheLayout = new javax.swing.GroupLayout(coteGauche);
        coteGauche.setLayout(coteGaucheLayout);
        coteGaucheLayout.setHorizontalGroup(
            coteGaucheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        coteGaucheLayout.setVerticalGroup(
            coteGaucheLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        getContentPane().add(coteGauche, new org.netbeans.lib.awtextra.AbsoluteConstraints(5, 145, -1, 149));

        defausse.setBackground(new java.awt.Color(200, 63, 65));

        javax.swing.GroupLayout defausseLayout = new javax.swing.GroupLayout(defausse);
        defausse.setLayout(defausseLayout);
        defausseLayout.setHorizontalGroup(
            defausseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 121, Short.MAX_VALUE)
        );
        defausseLayout.setVerticalGroup(
            defausseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        getContentPane().add(defausse, new org.netbeans.lib.awtextra.AbsoluteConstraints(131, 39, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    
    
    // --------------------------------------------------------------------------
    // -------------------- METHODES POUR CREER LES DECKS -----------------------
    // --------------------------------------------------------------------------
    // Méthode pour récupérer le contenu de la ligne n d'un fichier texte.
    
    
    private static int recupererValeurLigne(String cheminFichier, int numeroLigne) {
        int valeur = 0;

        try (BufferedReader lecteur = new BufferedReader(new FileReader(cheminFichier))) {
            String ligne;
            int numeroLigneActuelle = 1;

            // Parcourir le fichier jusqu'à atteindre la ligne souhaitée
            while ((ligne = lecteur.readLine()) != null) {
                if (numeroLigneActuelle == numeroLigne) {
                    // Vous avez trouvé la ligne souhaitée, convertissez la valeur en int
                    valeur = Integer.parseInt(ligne.trim());
                    break; // Sortir de la boucle une fois la ligne trouvée
                }

                numeroLigneActuelle++;
            }
        } catch (IOException | NumberFormatException e) {
            e.printStackTrace();
            // Gérer les erreurs liées à la lecture du fichier ou à la conversion en int
        }

        // Retourner la valeur de la ligne
        return valeur;
    }
    private static String recupererTexteLigne(String cheminFichier, int numeroLigne) {
        String ligne = null;

        try (BufferedReader lecteur = new BufferedReader(new FileReader(cheminFichier))) {
            int numeroLigneActuelle = 1;

            // Parcourir le fichier jusqu'à atteindre la ligne souhaitée
            while ((ligne = lecteur.readLine()) != null) {
                if (numeroLigneActuelle == numeroLigne) {
                    // Vous avez trouvé la ligne souhaitée
                    break; // Sortir de la boucle une fois la ligne trouvée
                }

                numeroLigneActuelle++;
            }
        } catch (IOException e) {
            e.printStackTrace();
            // Gérer les erreurs liées à la lecture du fichier
        }

        // Retourner la ligne du fichier en tant que String
        return ligne;
    }
    ArrayList<Carte> creerDeckTotal(){
        ArrayList<Carte> deck = new ArrayList<>();
        String nom;
        String image;
        int[][]coups = new int[4][2];
        int l;
        int indice;
        for(int i=0;i<16;i++){
            
            nom = recupererTexteLigne("src/Jeu/noms.txt",i+1);
            image = nom+".jpg";
            for(int j=0;j<4;j++){
                
                for(int k=0;k<2;k++){
                    l = j/2;
                    indice = i*8+j*2+k+1;
                    coups[j][k]= recupererValeurLigne("src/Jeu/coups.txt", (indice));
                    //System.out.println("ligne"+ (indice));
                    //System.out.println("i="+i+" j="+j+" k="+k +" l="+l);
                    System.out.println(recupererValeurLigne("src/Jeu/coups.txt", (indice)));
                    //System.out.println("j="+j+" k="+k);
                }
                   //coups[j][1]= recupererValeurLigne("src/Jeu/coups.txt", (i*4+j+1));
                   //System.out.println("ligne"+ (i*4+j+1));
                   //System.out.println(recupererValeurLigne("src/Jeu/coups.txt", (i*4+j+1))); 
            }
            carte = new Carte(nom,image, coups);
            System.out.println(carte);
            deck.add(carte);
        }
        return deck;
    }
    
    
    public void initialiserPartie(){
        grille.initialiser();
        repaint();
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(fenetrePrincipale.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(fenetrePrincipale.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(fenetrePrincipale.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(fenetrePrincipale.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new fenetrePrincipale().setVisible(true);
            }
        });
        
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel coteDroit;
    private javax.swing.JPanel coteGauche;
    private javax.swing.JPanel defausse;
    private javax.swing.JPanel jPanelGrille;
    // End of variables declaration//GEN-END:variables
}
